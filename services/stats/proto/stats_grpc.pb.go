// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/stats.proto

package taskspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StatsService_StatTask_FullMethodName = "/StatsService/StatTask"
	StatsService_TopTask_FullMethodName  = "/StatsService/TopTask"
	StatsService_TopUser_FullMethodName  = "/StatsService/TopUser"
)

// StatsServiceClient is the client API for StatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsServiceClient interface {
	StatTask(ctx context.Context, in *StatTaskRequest, opts ...grpc.CallOption) (*StatTaskResponse, error)
	TopTask(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (StatsService_TopTaskClient, error)
	TopUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (StatsService_TopUserClient, error)
}

type statsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsServiceClient(cc grpc.ClientConnInterface) StatsServiceClient {
	return &statsServiceClient{cc}
}

func (c *statsServiceClient) StatTask(ctx context.Context, in *StatTaskRequest, opts ...grpc.CallOption) (*StatTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatTaskResponse)
	err := c.cc.Invoke(ctx, StatsService_StatTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) TopTask(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (StatsService_TopTaskClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StatsService_ServiceDesc.Streams[0], StatsService_TopTask_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &statsServiceTopTaskClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatsService_TopTaskClient interface {
	Recv() (*TopTaskResponse, error)
	grpc.ClientStream
}

type statsServiceTopTaskClient struct {
	grpc.ClientStream
}

func (x *statsServiceTopTaskClient) Recv() (*TopTaskResponse, error) {
	m := new(TopTaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statsServiceClient) TopUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (StatsService_TopUserClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StatsService_ServiceDesc.Streams[1], StatsService_TopUser_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &statsServiceTopUserClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatsService_TopUserClient interface {
	Recv() (*TopUsersResponse, error)
	grpc.ClientStream
}

type statsServiceTopUserClient struct {
	grpc.ClientStream
}

func (x *statsServiceTopUserClient) Recv() (*TopUsersResponse, error) {
	m := new(TopUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatsServiceServer is the server API for StatsService service.
// All implementations must embed UnimplementedStatsServiceServer
// for forward compatibility
type StatsServiceServer interface {
	StatTask(context.Context, *StatTaskRequest) (*StatTaskResponse, error)
	TopTask(*TopRequest, StatsService_TopTaskServer) error
	TopUser(*emptypb.Empty, StatsService_TopUserServer) error
	mustEmbedUnimplementedStatsServiceServer()
}

// UnimplementedStatsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatsServiceServer struct {
}

func (UnimplementedStatsServiceServer) StatTask(context.Context, *StatTaskRequest) (*StatTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatTask not implemented")
}
func (UnimplementedStatsServiceServer) TopTask(*TopRequest, StatsService_TopTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method TopTask not implemented")
}
func (UnimplementedStatsServiceServer) TopUser(*emptypb.Empty, StatsService_TopUserServer) error {
	return status.Errorf(codes.Unimplemented, "method TopUser not implemented")
}
func (UnimplementedStatsServiceServer) mustEmbedUnimplementedStatsServiceServer() {}

// UnsafeStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServiceServer will
// result in compilation errors.
type UnsafeStatsServiceServer interface {
	mustEmbedUnimplementedStatsServiceServer()
}

func RegisterStatsServiceServer(s grpc.ServiceRegistrar, srv StatsServiceServer) {
	s.RegisterService(&StatsService_ServiceDesc, srv)
}

func _StatsService_StatTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).StatTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsService_StatTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).StatTask(ctx, req.(*StatTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_TopTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServiceServer).TopTask(m, &statsServiceTopTaskServer{ServerStream: stream})
}

type StatsService_TopTaskServer interface {
	Send(*TopTaskResponse) error
	grpc.ServerStream
}

type statsServiceTopTaskServer struct {
	grpc.ServerStream
}

func (x *statsServiceTopTaskServer) Send(m *TopTaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StatsService_TopUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServiceServer).TopUser(m, &statsServiceTopUserServer{ServerStream: stream})
}

type StatsService_TopUserServer interface {
	Send(*TopUsersResponse) error
	grpc.ServerStream
}

type statsServiceTopUserServer struct {
	grpc.ServerStream
}

func (x *statsServiceTopUserServer) Send(m *TopUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StatsService_ServiceDesc is the grpc.ServiceDesc for StatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StatsService",
	HandlerType: (*StatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StatTask",
			Handler:    _StatsService_StatTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TopTask",
			Handler:       _StatsService_TopTask_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TopUser",
			Handler:       _StatsService_TopUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/stats.proto",
}
